/**
 * Copyright (c) 2000-2010 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lig.model.impl;

import com.liferay.lig.model.Insult;
import com.liferay.lig.model.InsultModel;
import com.liferay.lig.model.InsultSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the Insult service. Represents a row in the &quot;insults_Insult&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lig.model.InsultModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InsultImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a insult model instance should use the {@link com.liferay.lig.model.Insult} interface instead.
 * </p>
 *
 * @author Rich Sezov
 * @see InsultImpl
 * @see com.liferay.lig.model.Insult
 * @see com.liferay.lig.model.InsultModel
 * @generated
 */
public class InsultModelImpl extends BaseModelImpl<Insult>
	implements InsultModel {
	public static final String TABLE_NAME = "insults_Insult";
	public static final Object[][] TABLE_COLUMNS = {
			{ "insultId", new Integer(Types.BIGINT) },
			{ "adjectiveOne", new Integer(Types.VARCHAR) },
			{ "directObject", new Integer(Types.VARCHAR) },
			{ "adjectiveTwo", new Integer(Types.VARCHAR) },
			{ "objPreposition", new Integer(Types.VARCHAR) },
			{ "companyId", new Integer(Types.BIGINT) },
			{ "groupId", new Integer(Types.BIGINT) },
			{ "userId", new Integer(Types.BIGINT) }
		};
	public static final String TABLE_SQL_CREATE = "create table insults_Insult (insultId LONG not null primary key,adjectiveOne VARCHAR(75) null,directObject VARCHAR(75) null,adjectiveTwo VARCHAR(75) null,objPreposition VARCHAR(75) null,companyId LONG,groupId LONG,userId LONG)";
	public static final String TABLE_SQL_DROP = "drop table insults_Insult";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lig.model.Insult"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lig.model.Insult"),
			true);

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Insult toModel(InsultSoap soapModel) {
		Insult model = new InsultImpl();

		model.setInsultId(soapModel.getInsultId());
		model.setAdjectiveOne(soapModel.getAdjectiveOne());
		model.setDirectObject(soapModel.getDirectObject());
		model.setAdjectiveTwo(soapModel.getAdjectiveTwo());
		model.setObjPreposition(soapModel.getObjPreposition());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Insult> toModels(InsultSoap[] soapModels) {
		List<Insult> models = new ArrayList<Insult>(soapModels.length);

		for (InsultSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lig.model.Insult"));

	public InsultModelImpl() {
	}

	public long getPrimaryKey() {
		return _insultId;
	}

	public void setPrimaryKey(long pk) {
		setInsultId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_insultId);
	}

	public long getInsultId() {
		return _insultId;
	}

	public void setInsultId(long insultId) {
		_insultId = insultId;
	}

	public String getAdjectiveOne() {
		if (_adjectiveOne == null) {
			return StringPool.BLANK;
		}
		else {
			return _adjectiveOne;
		}
	}

	public void setAdjectiveOne(String adjectiveOne) {
		_adjectiveOne = adjectiveOne;
	}

	public String getDirectObject() {
		if (_directObject == null) {
			return StringPool.BLANK;
		}
		else {
			return _directObject;
		}
	}

	public void setDirectObject(String directObject) {
		_directObject = directObject;
	}

	public String getAdjectiveTwo() {
		if (_adjectiveTwo == null) {
			return StringPool.BLANK;
		}
		else {
			return _adjectiveTwo;
		}
	}

	public void setAdjectiveTwo(String adjectiveTwo) {
		_adjectiveTwo = adjectiveTwo;
	}

	public String getObjPreposition() {
		if (_objPreposition == null) {
			return StringPool.BLANK;
		}
		else {
			return _objPreposition;
		}
	}

	public void setObjPreposition(String objPreposition) {
		_objPreposition = objPreposition;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public Insult toEscapedModel() {
		if (isEscapedModel()) {
			return (Insult)this;
		}
		else {
			return (Insult)Proxy.newProxyInstance(Insult.class.getClassLoader(),
				new Class[] { Insult.class }, new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					Insult.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		InsultImpl clone = new InsultImpl();

		clone.setInsultId(getInsultId());
		clone.setAdjectiveOne(getAdjectiveOne());
		clone.setDirectObject(getDirectObject());
		clone.setAdjectiveTwo(getAdjectiveTwo());
		clone.setObjPreposition(getObjPreposition());
		clone.setCompanyId(getCompanyId());
		clone.setGroupId(getGroupId());
		clone.setUserId(getUserId());

		return clone;
	}

	public int compareTo(Insult insult) {
		long pk = insult.getPrimaryKey();

		if (getPrimaryKey() < pk) {
			return -1;
		}
		else if (getPrimaryKey() > pk) {
			return 1;
		}
		else {
			return 0;
		}
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Insult insult = null;

		try {
			insult = (Insult)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = insult.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{insultId=");
		sb.append(getInsultId());
		sb.append(", adjectiveOne=");
		sb.append(getAdjectiveOne());
		sb.append(", directObject=");
		sb.append(getDirectObject());
		sb.append(", adjectiveTwo=");
		sb.append(getAdjectiveTwo());
		sb.append(", objPreposition=");
		sb.append(getObjPreposition());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lig.model.Insult");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>insultId</column-name><column-value><![CDATA[");
		sb.append(getInsultId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adjectiveOne</column-name><column-value><![CDATA[");
		sb.append(getAdjectiveOne());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>directObject</column-name><column-value><![CDATA[");
		sb.append(getDirectObject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adjectiveTwo</column-name><column-value><![CDATA[");
		sb.append(getAdjectiveTwo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>objPreposition</column-name><column-value><![CDATA[");
		sb.append(getObjPreposition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _insultId;
	private String _adjectiveOne;
	private String _directObject;
	private String _adjectiveTwo;
	private String _objPreposition;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private transient ExpandoBridge _expandoBridge;
}