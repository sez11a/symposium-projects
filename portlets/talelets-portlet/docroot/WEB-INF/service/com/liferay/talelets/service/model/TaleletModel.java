/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.talelets.service.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the Talelet service. Represents a row in the &quot;talelets_Talelet&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.liferay.talelets.service.model.impl.TaleletModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.liferay.talelets.service.model.impl.TaleletImpl}.
 * </p>
 *
 * @author Rich Sezov
 * @see Talelet
 * @see com.liferay.talelets.service.model.impl.TaleletImpl
 * @see com.liferay.talelets.service.model.impl.TaleletModelImpl
 * @generated
 */
public interface TaleletModel extends BaseModel<Talelet> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a talelet model instance should use the {@link Talelet} interface instead.
	 */

	/**
	 * Gets the primary key of this talelet.
	 *
	 * @return the primary key of this talelet
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this talelet
	 *
	 * @param pk the primary key of this talelet
	 */
	public void setPrimaryKey(long pk);

	/**
	 * Gets the uuid of this talelet.
	 *
	 * @return the uuid of this talelet
	 */
	@AutoEscape
	public String getUuid();

	/**
	 * Sets the uuid of this talelet.
	 *
	 * @param uuid the uuid of this talelet
	 */
	public void setUuid(String uuid);

	/**
	 * Gets the tale id of this talelet.
	 *
	 * @return the tale id of this talelet
	 */
	public long getTaleId();

	/**
	 * Sets the tale id of this talelet.
	 *
	 * @param taleId the tale id of this talelet
	 */
	public void setTaleId(long taleId);

	/**
	 * Gets the tale parent id of this talelet.
	 *
	 * @return the tale parent id of this talelet
	 */
	public long getTaleParentId();

	/**
	 * Sets the tale parent id of this talelet.
	 *
	 * @param taleParentId the tale parent id of this talelet
	 */
	public void setTaleParentId(long taleParentId);

	/**
	 * Gets the tale starter id of this talelet.
	 *
	 * @return the tale starter id of this talelet
	 */
	public long getTaleStarterId();

	/**
	 * Sets the tale starter id of this talelet.
	 *
	 * @param taleStarterId the tale starter id of this talelet
	 */
	public void setTaleStarterId(long taleStarterId);

	/**
	 * Gets the tale order of this talelet.
	 *
	 * @return the tale order of this talelet
	 */
	public int getTaleOrder();

	/**
	 * Sets the tale order of this talelet.
	 *
	 * @param taleOrder the tale order of this talelet
	 */
	public void setTaleOrder(int taleOrder);

	/**
	 * Gets the tale title of this talelet.
	 *
	 * @return the tale title of this talelet
	 */
	@AutoEscape
	public String getTaleTitle();

	/**
	 * Sets the tale title of this talelet.
	 *
	 * @param taleTitle the tale title of this talelet
	 */
	public void setTaleTitle(String taleTitle);

	/**
	 * Gets the author name of this talelet.
	 *
	 * @return the author name of this talelet
	 */
	@AutoEscape
	public String getAuthorName();

	/**
	 * Sets the author name of this talelet.
	 *
	 * @param authorName the author name of this talelet
	 */
	public void setAuthorName(String authorName);

	/**
	 * Gets the tale date of this talelet.
	 *
	 * @return the tale date of this talelet
	 */
	public Date getTaleDate();

	/**
	 * Sets the tale date of this talelet.
	 *
	 * @param taleDate the tale date of this talelet
	 */
	public void setTaleDate(Date taleDate);

	/**
	 * Gets the date updated of this talelet.
	 *
	 * @return the date updated of this talelet
	 */
	public Date getDateUpdated();

	/**
	 * Sets the date updated of this talelet.
	 *
	 * @param dateUpdated the date updated of this talelet
	 */
	public void setDateUpdated(Date dateUpdated);

	/**
	 * Gets the content of this talelet.
	 *
	 * @return the content of this talelet
	 */
	@AutoEscape
	public String getContent();

	/**
	 * Sets the content of this talelet.
	 *
	 * @param content the content of this talelet
	 */
	public void setContent(String content);

	/**
	 * Gets the company id of this talelet.
	 *
	 * @return the company id of this talelet
	 */
	public long getCompanyId();

	/**
	 * Sets the company id of this talelet.
	 *
	 * @param companyId the company id of this talelet
	 */
	public void setCompanyId(long companyId);

	/**
	 * Gets the group id of this talelet.
	 *
	 * @return the group id of this talelet
	 */
	public long getGroupId();

	/**
	 * Sets the group id of this talelet.
	 *
	 * @param groupId the group id of this talelet
	 */
	public void setGroupId(long groupId);

	/**
	 * Gets the user id of this talelet.
	 *
	 * @return the user id of this talelet
	 */
	public long getUserId();

	/**
	 * Sets the user id of this talelet.
	 *
	 * @param userId the user id of this talelet
	 */
	public void setUserId(long userId);

	/**
	 * Gets the user uuid of this talelet.
	 *
	 * @return the user uuid of this talelet
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this talelet.
	 *
	 * @param userUuid the user uuid of this talelet
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Gets the status of this talelet.
	 *
	 * @return the status of this talelet
	 */
	public int getStatus();

	/**
	 * Sets the status of this talelet.
	 *
	 * @param status the status of this talelet
	 */
	public void setStatus(int status);

	/**
	 * Gets the status by user id of this talelet.
	 *
	 * @return the status by user id of this talelet
	 */
	public long getStatusByUserId();

	/**
	 * Sets the status by user id of this talelet.
	 *
	 * @param statusByUserId the status by user id of this talelet
	 */
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Gets the status by user uuid of this talelet.
	 *
	 * @return the status by user uuid of this talelet
	 * @throws SystemException if a system exception occurred
	 */
	public String getStatusByUserUuid() throws SystemException;

	/**
	 * Sets the status by user uuid of this talelet.
	 *
	 * @param statusByUserUuid the status by user uuid of this talelet
	 */
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Gets the status by user name of this talelet.
	 *
	 * @return the status by user name of this talelet
	 */
	@AutoEscape
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this talelet.
	 *
	 * @param statusByUserName the status by user name of this talelet
	 */
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Gets the status date of this talelet.
	 *
	 * @return the status date of this talelet
	 */
	public Date getStatusDate();

	/**
	 * Sets the status date of this talelet.
	 *
	 * @param statusDate the status date of this talelet
	 */
	public void setStatusDate(Date statusDate);

	/**
	 * @deprecated {@link #isApproved}
	 */
	public boolean getApproved();

	/**
	 * Determines if this talelet is approved.
	 *
	 * @return <code>true</code> if this talelet is approved; <code>false</code> otherwise
	 */
	public boolean isApproved();

	/**
	 * Determines if this talelet is a draft.
	 *
	 * @return <code>true</code> if this talelet is a draft; <code>false</code> otherwise
	 */
	public boolean isDraft();

	/**
	 * Determines if this talelet is expired.
	 *
	 * @return <code>true</code> if this talelet is expired; <code>false</code> otherwise
	 */
	public boolean isExpired();

	/**
	 * Determines if this talelet is pending.
	 *
	 * @return <code>true</code> if this talelet is pending; <code>false</code> otherwise
	 */
	public boolean isPending();

	public boolean isNew();

	public void setNew(boolean n);

	public boolean isCachedModel();

	public void setCachedModel(boolean cachedModel);

	public boolean isEscapedModel();

	public void setEscapedModel(boolean escapedModel);

	public Serializable getPrimaryKeyObj();

	public ExpandoBridge getExpandoBridge();

	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public Object clone();

	public int compareTo(Talelet talelet);

	public int hashCode();

	public Talelet toEscapedModel();

	public String toString();

	public String toXmlString();
}